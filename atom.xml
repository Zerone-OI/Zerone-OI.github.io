<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zerone的个人博客</title>
  
  
  <link href="http://www.mycpl1004.top/atom.xml" rel="self"/>
  
  <link href="http://www.mycpl1004.top/"/>
  <updated>2023-03-19T17:29:17.745Z</updated>
  <id>http://www.mycpl1004.top/</id>
  
  <author>
    <name>Zerone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>直接内存</title>
    <link href="http://www.mycpl1004.top/2023/03/20/%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/"/>
    <id>http://www.mycpl1004.top/2023/03/20/%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</id>
    <published>2023-03-19T17:29:03.000Z</published>
    <updated>2023-03-19T17:29:17.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li>常见于NIO操作，用于数据缓冲区</li><li>分配回收成本较高，但读写性能高</li><li>不受JVM内存回收管理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Zerone-OI/cloudimg@main/202303191746175.png" alt="Untitled"></p><p><img src="https://cdn.jsdelivr.net/gh/Zerone-OI/cloudimg@main/202303191746368.png" alt="uTools_1678371053120"></p><p>以下是可能导致直接内存溢出的Java代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectMemoryOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 1GB buffer</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ByteBuffer.allocateDirect(bufferSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码会导致 <code>OutOfMemoryError: Direct buffer memory</code>。这是因为JVM无法回收直接内存，所以当程序分配了太多的直接内存时，会导致内存溢出。</p><h2 id="直接内存释放原理"><a href="#直接内存释放原理" class="headerlink" title="直接内存释放原理"></a>直接内存释放原理</h2><p>直接内存的分配是通过调用 <code>ByteBuffer.allocateDirect()</code> 方法实现的，底层是通过调用 <code>Unsafe</code> 类的 <code>allocateMemory()</code> 方法在操作系统层面上进行分配。所以，直接内存的分配和普通堆内存的分配是不同的，前者是在 JVM 外部进行的，而后者是在 JVM 内部进行的。</p><p>直接内存的回收是通过垃圾回收机制无法进行的，因为它不受 JVM 内存回收机制的管理。因此，必须手动释放直接内存。释放直接内存的方法是通过调用 <code>ByteBuffer</code> 的 <code>cleaner()</code> 方法，然后调用 <code>Cleaner</code> 对象的 <code>clean()</code> 方法。<code>clean()</code> 方法会在 JVM 发现垃圾对象时被调用，在这个方法中，我们可以调用 <code>Unsafe</code> 类的 <code>freeMemory()</code> 方法释放直接内存。</p><p>总结来说，直接内存的分配成本较高，但读写性能高。而直接内存的释放需要手动进行，否则可能会导致内存泄漏或内存溢出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;直接内存&quot;&gt;&lt;a href=&quot;#直接内存&quot; class=&quot;headerlink&quot; title=&quot;直接内存&quot;&gt;&lt;/a&gt;直接内存&lt;/h1&gt;&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>本地方法栈</title>
    <link href="http://www.mycpl1004.top/2023/03/20/%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/"/>
    <id>http://www.mycpl1004.top/2023/03/20/%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</id>
    <published>2023-03-19T17:17:48.000Z</published>
    <updated>2023-03-19T17:18:03.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>本地方法栈（Native Method Stack）是 JVM 执行本地方法（Native Method）的一块内存区域，与 Java 虚拟机栈类似，每个线程都有自己的本地方法栈。本地方法栈中存储的是本地方法的栈帧，栈帧中包含了本地方法的参数、局部变量以及返回值等信息。</p><p>与 Java 虚拟机栈不同的是，本地方法栈并不是虚拟机规范中的必要区域，也就是说，JVM 可以选择不去实现本地方法栈，而直接把本地方法映射到 Java 栈上。这种情况下，本地方法的参数和返回值将会和 Java 方法混在一起存放，而不是在一个独立的栈帧中存放。</p><p>需要注意的是，虽然本地方法栈不是必需的，但是在实际的 JVM 实现中，几乎所有的 JVM 都会提供本地方法栈。本地方法栈的大小也可以通过虚拟机参数来设置。如果本地方法栈空间不足，就会抛出 StackOverflowError 异常。</p><p><img src="https://cdn.jsdelivr.net/gh/Zerone-OI/cloudimg@main/202303191744973.png" alt="uTools_1678306438061"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本地方法栈&quot;&gt;&lt;a href=&quot;#本地方法栈&quot; class=&quot;headerlink&quot; title=&quot;本地方法栈&quot;&gt;&lt;/a&gt;本地方法栈&lt;/h1&gt;&lt;p&gt;本地方法栈（Native Method Stack）是 JVM 执行本地方法（Native Method）的一块内存</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>方法区</title>
    <link href="http://www.mycpl1004.top/2023/03/20/%E6%96%B9%E6%B3%95%E5%8C%BA%206396b3a623944546a1d8117d711c8a8e/"/>
    <id>http://www.mycpl1004.top/2023/03/20/%E6%96%B9%E6%B3%95%E5%8C%BA%206396b3a623944546a1d8117d711c8a8e/</id>
    <published>2023-03-19T16:12:03.139Z</published>
    <updated>2023-03-19T13:29:04.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h1 id="方法区-1"><a href="#方法区-1" class="headerlink" title="方法区"></a>方法区</h1><p>方法区是Java虚拟机规范中的一个内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。方法区也被称为非堆内存，与堆内存不同的是，方法区不用于存储对象实例。</p><p>方法区的大小可以通过虚拟机启动参数进行调整，如果方法区中的数据无法被回收，就可能会导致OutOfMemoryError异常。</p><h1 id="JVM内存结构在1-6和1-8的不同"><a href="#JVM内存结构在1-6和1-8的不同" class="headerlink" title="JVM内存结构在1.6和1.8的不同"></a>JVM内存结构在1.6和1.8的不同</h1><p>Java虚拟机在1.6和1.8版本中的内存结构有所不同。1.6版本的内存结构中只包括堆内存、方法区以及Java虚拟机栈、本地方法栈，而1.8版本新增了元空间（Metaspace）来替代方法区。</p><p><img src="https://cdn.jsdelivr.net/gh/Zerone-OI/cloudimg@main/202303191753266.png" alt="Untitled"></p><h1 id="方法区内存溢出"><a href="#方法区内存溢出" class="headerlink" title="方法区内存溢出"></a>方法区内存溢出</h1><ul><li>1.8之前会导致永久内存溢出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">演示永久代内存溢出 java.lang.OuofMemoryError: PerGen space</span><br><span class="line">-XX:MaxPermSize=8m</span><br></pre></td></tr></table></figure><ul><li>1.8之后会导致元空间内存溢出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">演示元空间内存溢出 java.lang.OuofMemoryError: Metaspace</span><br><span class="line">-XX:MaxMetaspaceSize=8m</span><br></pre></td></tr></table></figure><p><strong>场景</strong></p><ul><li>spring</li><li>mybatis</li></ul><h1 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h1><ul><li>常量池,就是一张表,虚拟机指令根据这张常量表找到要执行的类名,方法名,参数类型,字面量等信息</li><li>运行时常量池,常量池的*.class文件中的,当该类被加载,它的常量池信息就会放入运行时常量池,并把里面的符号地址变为真实地址</li></ul><p><a href="https://www.notion.so/StringTable-6f531c422d7e43a2b37f04b375d5eebd">StringTable</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;方法区&quot;&gt;&lt;a href=&quot;#方法区&quot; class=&quot;headerlink&quot; title=&quot;方法区&quot;&gt;&lt;/a&gt;方法区&lt;/h1&gt;&lt;h1 id=&quot;方法区-1&quot;&gt;&lt;a href=&quot;#方法区-1&quot; class=&quot;headerlink&quot; title=&quot;方法区&quot;&gt;&lt;/a&gt;方法</summary>
      
    
    
    
    
    <category term="JVM" scheme="http://www.mycpl1004.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.mycpl1004.top/2023/03/20/hello-world/"/>
    <id>http://www.mycpl1004.top/2023/03/20/hello-world/</id>
    <published>2023-03-19T16:06:29.060Z</published>
    <updated>2023-03-19T16:06:29.060Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
